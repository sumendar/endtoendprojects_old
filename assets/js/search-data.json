{
  
    
        "post0": {
            "title": "Foundational Concepts of R Programming (Sample Notebook for preview)",
            "content": "Data Types . Numeric (integer and double) . i1 = 10 i2= 2.34 i3 = 5/2 i4 = -90 i5 = 5L # Here, L tells R to store the value as an integer, i6 = 3+6i print(class(i1)) print(typeof(i1)) print(class(i2)) print(class(i3)) print(class(i4)) print(class(i5)) print(class(i6)) # these are to test for numerical data types #real numbers (real) and complex numbers . [1] &#34;numeric&#34; [1] &#34;double&#34; [1] &#34;numeric&#34; [1] &#34;numeric&#34; [1] &#34;numeric&#34; [1] &#34;integer&#34; [1] &#34;complex&#34; . print(typeof(i1)) print(typeof(i2)) print(typeof(i3)) print(typeof(i4)) print(typeof(i5)) . [1] &#34;double&#34; [1] &#34;double&#34; [1] &#34;double&#34; [1] &#34;double&#34; [1] &#34;integer&#34; . complex . i5 = 2+7i print(class(i5)) . [1] &#34;complex&#34; . character and factor . c1 = &quot;c&quot; c2 = &quot;data&quot; c3 = &#39;R-Programming&#39; print(class(c1)) print(class(c2)) print(class(c3)) v1 &lt;- c(&quot;data&quot;,&quot;science&quot;,&quot;R-Programming&quot;) print(class(v1)) . [1] &#34;character&#34; [1] &#34;character&#34; [1] &#34;character&#34; [1] &#34;character&#34; . Factors Factor object encodes a vector of unique elements (levels) from the given data vector. . v1 &lt;- c(&quot;data&quot;,&quot;science&quot;,&quot;R-Programming&quot;) f1 =factor(v1) print(class(v1)) print(v1) print(f1) v2 &lt;- c(&quot;medium&quot;,&quot;High&quot;,&quot;low&quot;) f2 =factor(v2) print(f2) v3 &lt;- c(&quot;medium&quot;,&quot;high&quot;,&quot;low&quot;) f3 =factor(v3, ordered = TRUE) print(f3) v4 &lt;- c(&quot;medium&quot;,&quot;high&quot;,&quot;low&quot;) f4 =factor(v4, ordered = TRUE, levels = c(&quot;low&quot;, &quot;medium&quot;, &quot;high&quot;)) print(f4) . [1] &#34;character&#34; [1] &#34;data&#34; &#34;science&#34; &#34;R-Programming&#34; [1] data science R-Programming Levels: data R-Programming science [1] medium High low Levels: High low medium [1] medium high low Levels: high &lt; low &lt; medium [1] medium high low Levels: low &lt; medium &lt; high . logical . l1 = TRUE l2 = FALSE print(class(l1)) print(class(l2)) . [1] &#34;logical&#34; [1] &#34;logical&#34; . date and time . c1 &lt;- &#39;2021-6-16&#39; d1 &lt;- as.Date(&#39;2021-6-16&#39;) print(c1) print(d1) print(class(c1)) print(class(d1)) . [1] &#34;2021-6-16&#34; [1] &#34;2021-06-16&#34; [1] &#34;character&#34; [1] &#34;Date&#34; . . as.Date(&#39;1/15/2001&#39;,format=&#39;%m/%d/%Y&#39;) # &quot;2001-01-15&quot; as.Date(&#39;April 26, 2001&#39;,format=&#39;%B %d, %Y&#39;) # &quot;2001-04-26&quot; as.Date(&#39;22JUN01&#39;,format=&#39;%d%b%y&#39;) # %y is system-specific; use with caution # &quot;2001-06-22&quot; . 2001-01-15 2001-04-26 2001-06-22 as.POSIXct: Date-time Conversion- . Sys.Date() . 2022-08-07 Sys.time() . [1] &#34;2022-08-07 10:01:29 IST&#34; . Raw . raw&lt;- charToRaw(&quot;R programming&quot;) print(raw) . [1] 52 20 70 72 6f 67 72 61 6d 6d 69 6e 67 . Raw is a very unusual data type. For instance, you could transform a character object or a integer numeric value to a raw object with the charToRaw and intToBits functions, respectively. . a &lt;- charToRaw(&quot;data science&quot;) print(a) # [1] 64 61 74 61 20 73 63 69 65 6e 63 65 class(a) # &quot;raw&quot; print(is.vector(a)) b &lt;- intToBits(6) print(b) class(b) # &quot;raw&quot; . [1] 64 61 74 61 20 73 63 69 65 6e 63 65 . &#39;raw&#39; [1] TRUE [1] 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 [26] 00 00 00 00 00 00 00 . &#39;raw&#39; rawToChar(a, multiple = TRUE) . &lt;ol class=list-inline&gt; &#39;d&#39; | &#39;a&#39; | &#39;t&#39; | &#39;a&#39; | &#39; &#39; | &#39;s&#39; | &#39;c&#39; | &#39;i&#39; | &#39;e&#39; | &#39;n&#39; | &#39;c&#39; | &#39;e&#39; | &lt;/ol&gt; Objects: In every computer language variables provide a means of accessing the data stored in memory. R does not provide direct access to the computer’s memory but rather provides a number of specialized data structures we will refer to as objects. These objects are referred to through symbols or variables . Everything in R language is an Object, Objects are further categorized into above mentioned list . . In this chapter we provide preliminary descriptions extraction and operations of the various data structures provided in R . Data Structures . vectors . Atomic vectors are one of the basic types of objects in R programming. Atomic vectors can store homogeneous data types such as character, doubles, integers, raw, logical, and complex. A single element variable is also said to be vector. . To create a vector we use c() function each value/element seperated with comma Eg: . x &lt;- c(2,7,1,7,1,6,80,0,1) | z &lt;- c(&quot;Alec&quot;, &quot;Dan&quot;, &quot;Rob&quot;, &quot;Rich&quot;) | y &lt;- c(TRUE, TRUE, FALSE, FALSE) | x &lt;- c(2,7,1,7,1,6,80,0,1) y &lt;- c(TRUE, TRUE, FALSE, FALSE) z &lt;- c(&quot;Alec&quot;, &quot;Dan&quot;, &quot;Rob&quot;, &quot;Rich&quot;) . print(class(x)) # numeric vector print(class(y)) # logical vector print(class(z)) # character vector . [1] &#34;numeric&#34; [1] &#34;logical&#34; [1] &#34;character&#34; . Indexing . Positive . print(x) #entire vector print(x[1]) print(x[2]) # to get range of elements print(x) #entire vector print(x[1:5]) print(x[3:8]) . [1] 2 7 1 7 1 6 80 0 1 [1] 2 [1] 7 [1] 2 7 1 7 1 6 80 0 1 [1] 2 7 1 7 1 [1] 1 7 1 6 80 0 . Negative . print(x) #entire vector print(x[-1]) #ignore/exclude first element print(x[-4]) #ignore/exclude fourth value . [1] 2 7 1 7 1 6 80 0 1 [1] 7 1 7 1 6 80 0 1 [1] 2 7 1 1 6 80 0 1 . matrices . Matrices To store values as 2-Dimensional array, matrices are used in R. Data, number of rows and columns are defined in the matrix() function. . To create a matrix we use matrix() function with nrow and ncol arguements Eg: . m1 &lt;- matrix(c(2,7,1,7,1,6,80,0,1),nrow=2,ncol=4) | m1 &lt;- matrix(c(2,7,1,7,1,6,80,0,1),nrow=3,ncol=3) print(m1) . [,1] [,2] [,3] [1,] 2 7 80 [2,] 7 1 0 [3,] 1 6 1 . Indexing . print(m1[1,1]) #first row first column element print(m1[2,3]) #second row third column element print(m1[3,3]) #third row third column value print(m1[2,]) #entire second row print(m1[,3]) #entire second row print(m1[,3,drop=FALSE]) #entire second row as vertical display . [1] 2 [1] 0 [1] 1 [1] 7 1 0 [1] 80 0 1 [,1] [1,] 80 [2,] 0 [3,] 1 . thismatrix &lt;- matrix(c(&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;orange&quot;, &quot;mango&quot;, &quot;pineapple&quot;), nrow = 3, ncol =2) print(thismatrix) #Remove the first row and the first column . [,1] [,2] [1,] &#34;apple&#34; &#34;orange&#34; [2,] &#34;banana&#34; &#34;mango&#34; [3,] &#34;cherry&#34; &#34;pineapple&#34; . thismatrix &lt;- thismatrix[-c(1), -c(1)] print(thismatrix) . [1] &#34;mango&#34; &#34;pineapple&#34; . create a matrix using cbind and rbind . m &lt;- cbind(Index = c(1:3), Age = c(30, 45, 34), Salary = c(500, 600, 550)) class(m) print(m) . &#39;matrix&#39; Index Age Salary [1,] 1 30 500 [2,] 2 45 600 [3,] 3 34 550 . arrays . Arrays array() function is used to create n-dimensional array. This function takes dim attribute as an argument and creates required length of each dimension as specified in the attribute. . a &lt;- array(data = 1:27, dim=c(3,3,3)) print(class(a)) print(a) . [1] &#34;array&#34; , , 1 [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 , , 2 [,1] [,2] [,3] [1,] 10 13 16 [2,] 11 14 17 [3,] 12 15 18 , , 3 [,1] [,2] [,3] [1,] 19 22 25 [2,] 20 23 26 [3,] 21 24 27 . Indexing . print(a[2,3,2]) # extract single element . [1] 17 . print(a[,,2]) # A two-dimensional array is the same thing as a matrix. . [,1] [,2] [,3] [1,] 10 13 16 [2,] 11 14 17 [3,] 12 15 18 . print(a[1,,2]) # extract one row . [1] 10 13 16 . print(a[, 3, 2, drop = FALSE]) # extract one column . , , 1 [,1] [1,] 16 [2,] 17 [3,] 18 . data frames . Data Frames Data frames are 2-dimensional tabular data object in R programming. Data frames consists of multiple columns and each column represents a vector. Columns in data frame can have different modes of data unlike matrices. . Name &lt;- c(&quot;Ramesh&quot;, &quot;Tarun&quot;, &quot;Shekar&quot;) age &lt;- c(23, 54, 32) height &lt;- c(4.6,5.4,6.2) df &lt;- data.frame(Name, age, height) df . Nameageheight . Ramesh | 23 | 4.6 | . Tarun | 54 | 5.4 | . Shekar | 32 | 6.2 | . df &lt;- data.frame(x = 1:3, y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) print(df) . x y 1 1 a 2 2 b 3 3 c . Create dataframe using cbind and rbind methods . df1 &lt;- cbind(1, df) print(class(df1)) print(df1) # Using rbind df &lt;- data.frame(a = c(1:5), b = (1:5)^2) df df2 = rbind(df, c(2, 3), c(5, 6)) print(df2) . [1] &#34;data.frame&#34; 1 x y 1 1 1 a 2 1 2 b 3 1 3 c . ab . 1 | 1 | . 2 | 4 | . 3 | 9 | . 4 | 16 | . 5 | 25 | . a b 1 1 1 2 2 4 3 3 9 4 4 16 5 5 25 6 2 3 7 5 6 . Indexing and Extracting Elements: . Name &lt;- c(&quot;Ramesh&quot;, &quot;Tarun&quot;, &quot;Shekar&quot;) age &lt;- c(23, 54, 32) height &lt;- c(4.6,5.4,6.2) df &lt;- data.frame(Name, age, height) df . Nameageheight . Ramesh | 23 | 4.6 | . Tarun | 54 | 5.4 | . Shekar | 32 | 6.2 | . df[1,1] . Ramesh &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt; &#39;Ramesh&#39; | &#39;Shekar&#39; | &#39;Tarun&#39; | &lt;/ol&gt; print(df$Name) . [1] Ramesh Tarun Shekar Levels: Ramesh Shekar Tarun . print(df[,&#39;Name&#39;]) . [1] Ramesh Tarun Shekar Levels: Ramesh Shekar Tarun . print(df[,c(&#39;Name&#39;,&#39;age&#39;)]) . Name age 1 Ramesh 23 2 Tarun 54 3 Shekar 32 . Create a dataframe using expand.grid() method . eg &lt;- expand.grid(pants = c(&quot;blue&quot;, &quot;black&quot;), shirt = c(&quot;white&quot;, &quot;grey&quot;, &quot;plaid&quot;)) print(class(eg)) print(eg) . [1] &#34;data.frame&#34; pants shirt 1 blue white 2 black white 3 blue grey 4 black grey 5 blue plaid 6 black plaid . lists . Lists List is another type of object in R programming. List can contain heterogeneous data types such as vectors or another lists. . List is a special vector. Each element can be a different class. | lists act as containers | Unlike atomic vectors, its contents are not restricted to a single type | a list can be anything, and two elements within a list can be of different types! | Lists are sometimes called recursive vectors, because a list can contain other lists | . Create a ists using list function x &lt;- list(1, &quot;a&quot;, TRUE, 1+4i) . lst1 &lt;- list(1, &quot;a&quot;, TRUE, 1+4i) print(lst1) . [[1]] [1] 1 [[2]] [1] &#34;a&#34; [[3]] [1] TRUE [[4]] [1] 1+4i . Indexing . print(lst1[1]) . [[1]] [1] 1 . class(lst1[1]) . &#39;list&#39; print(lst1[1]*2) # we will get error because its not a number, but its still a list . class(lst1[[1]]) . &#39;numeric&#39; print(lst1[[1]]) . [1] 1 . lst1[[1]]*2 . 2 v &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;orange&quot;, &quot;mango&quot;, &quot;pineapple&quot;) print(v) #creating matrix m &lt;- matrix(c(&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;orange&quot;, &quot;mango&quot;, &quot;pineapple&quot;), nrow = 3, ncol =2) print(m) #creating array a &lt;- array(c(&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;orange&quot;, &quot;mango&quot;, &quot;pineapple&quot;), dim = c(2,2,2)) print(a) #creating dataframe Name &lt;- c(&quot;Ramesh&quot;, &quot;Tarun&quot;, &quot;Shekar&quot;) age &lt;- c(23, 54, 32) height &lt;- c(4.6,5.4,6.2) df &lt;- data.frame(Name, age, height) print(df) . [1] &#34;apple&#34; &#34;banana&#34; &#34;cherry&#34; &#34;orange&#34; &#34;mango&#34; &#34;pineapple&#34; [,1] [,2] [1,] &#34;apple&#34; &#34;orange&#34; [2,] &#34;banana&#34; &#34;mango&#34; [3,] &#34;cherry&#34; &#34;pineapple&#34; , , 1 [,1] [,2] [1,] &#34;apple&#34; &#34;cherry&#34; [2,] &#34;banana&#34; &#34;orange&#34; , , 2 [,1] [,2] [1,] &#34;mango&#34; &#34;apple&#34; [2,] &#34;pineapple&#34; &#34;banana&#34; Name age height 1 Ramesh 23 4.6 2 Tarun 54 5.4 3 Shekar 32 6.2 . lst2 &lt;- list(v,m,a,df, lst1) print(class(lst2)) print(lst2) . [1] &#34;list&#34; [[1]] [1] &#34;apple&#34; &#34;banana&#34; &#34;cherry&#34; &#34;orange&#34; &#34;mango&#34; &#34;pineapple&#34; [[2]] [,1] [,2] [1,] &#34;apple&#34; &#34;orange&#34; [2,] &#34;banana&#34; &#34;mango&#34; [3,] &#34;cherry&#34; &#34;pineapple&#34; [[3]] , , 1 [,1] [,2] [1,] &#34;apple&#34; &#34;cherry&#34; [2,] &#34;banana&#34; &#34;orange&#34; , , 2 [,1] [,2] [1,] &#34;mango&#34; &#34;apple&#34; [2,] &#34;pineapple&#34; &#34;banana&#34; [[4]] Name age height 1 Ramesh 23 4.6 2 Tarun 54 5.4 3 Shekar 32 6.2 [[5]] [[5]][[1]] [1] 1 [[5]][[2]] [1] &#34;a&#34; [[5]][[3]] [1] TRUE [[5]][[4]] [1] 1+4i . lst2[[1]] # a vector stored in a lis . &lt;ol class=list-inline&gt; &#39;apple&#39; | &#39;banana&#39; | &#39;cherry&#39; | &#39;orange&#39; | &#39;mango&#39; | &#39;pineapple&#39; | &lt;/ol&gt; lst2[[1]][2] . &#39;banana&#39; lst2[[2]] # a matrix stored in a list . apple | orange | . banana | mango | . cherry | pineapple | . lst2[[2]][2,2] . &#39;mango&#39; print(lst2[[3]]) . , , 1 [,1] [,2] [1,] &#34;apple&#34; &#34;cherry&#34; [2,] &#34;banana&#34; &#34;orange&#34; , , 2 [,1] [,2] [1,] &#34;mango&#34; &#34;apple&#34; [2,] &#34;pineapple&#34; &#34;banana&#34; . print(lst2[[3]][,,2]) . [,1] [,2] [1,] &#34;mango&#34; &#34;apple&#34; [2,] &#34;pineapple&#34; &#34;banana&#34; . print(lst2[[3]][2,1,2]) . [1] &#34;pineapple&#34; . print(lst2[[4]]) . Name age height 1 Ramesh 23 4.6 2 Tarun 54 5.4 3 Shekar 32 6.2 . print(lst2[[4]][2,1]) . [1] Tarun Levels: Ramesh Shekar Tarun . print(lst2[[5]]) . [[1]] [1] 1 [[2]] [1] &#34;a&#34; [[3]] [1] TRUE [[4]] [1] 1+4i . print(lst2[[5]][[2]]) . [1] &#34;a&#34; . . Reshaping R Objects . vec &lt;- 1:12 # a vector print(vec) mat &lt;- matrix( vec, nrow=2) # a matrix print(mat) dim(mat) &lt;- NULL print(mat) # back to vector . [1] 1 2 3 4 5 6 7 8 9 10 11 12 [,1] [,2] [,3] [,4] [,5] [,6] [1,] 1 3 5 7 9 11 [2,] 2 4 6 8 10 12 [1] 1 2 3 4 5 6 7 8 9 10 11 12 . print(mtcars) ULmtcars &lt;- unlist(mtcars) # produces a vector from the dataframe . mpg cyl disp hp drat wt qsec vs am gear carb Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 . print(ULmtcars) UCmtcars &lt;- unclass(mtcars) # removes the class attribute, turning the dataframe into a . mpg1 mpg2 mpg3 mpg4 mpg5 mpg6 mpg7 mpg8 mpg9 mpg10 21.000 21.000 22.800 21.400 18.700 18.100 14.300 24.400 22.800 19.200 mpg11 mpg12 mpg13 mpg14 mpg15 mpg16 mpg17 mpg18 mpg19 mpg20 17.800 16.400 17.300 15.200 10.400 10.400 14.700 32.400 30.400 33.900 mpg21 mpg22 mpg23 mpg24 mpg25 mpg26 mpg27 mpg28 mpg29 mpg30 21.500 15.500 15.200 13.300 19.200 27.300 26.000 30.400 15.800 19.700 mpg31 mpg32 cyl1 cyl2 cyl3 cyl4 cyl5 cyl6 cyl7 cyl8 15.000 21.400 6.000 6.000 4.000 6.000 8.000 6.000 8.000 4.000 cyl9 cyl10 cyl11 cyl12 cyl13 cyl14 cyl15 cyl16 cyl17 cyl18 4.000 6.000 6.000 8.000 8.000 8.000 8.000 8.000 8.000 4.000 cyl19 cyl20 cyl21 cyl22 cyl23 cyl24 cyl25 cyl26 cyl27 cyl28 4.000 4.000 4.000 8.000 8.000 8.000 8.000 4.000 4.000 4.000 cyl29 cyl30 cyl31 cyl32 disp1 disp2 disp3 disp4 disp5 disp6 8.000 6.000 8.000 4.000 160.000 160.000 108.000 258.000 360.000 225.000 disp7 disp8 disp9 disp10 disp11 disp12 disp13 disp14 disp15 disp16 360.000 146.700 140.800 167.600 167.600 275.800 275.800 275.800 472.000 460.000 disp17 disp18 disp19 disp20 disp21 disp22 disp23 disp24 disp25 disp26 440.000 78.700 75.700 71.100 120.100 318.000 304.000 350.000 400.000 79.000 disp27 disp28 disp29 disp30 disp31 disp32 hp1 hp2 hp3 hp4 120.300 95.100 351.000 145.000 301.000 121.000 110.000 110.000 93.000 110.000 hp5 hp6 hp7 hp8 hp9 hp10 hp11 hp12 hp13 hp14 175.000 105.000 245.000 62.000 95.000 123.000 123.000 180.000 180.000 180.000 hp15 hp16 hp17 hp18 hp19 hp20 hp21 hp22 hp23 hp24 205.000 215.000 230.000 66.000 52.000 65.000 97.000 150.000 150.000 245.000 hp25 hp26 hp27 hp28 hp29 hp30 hp31 hp32 drat1 drat2 175.000 66.000 91.000 113.000 264.000 175.000 335.000 109.000 3.900 3.900 drat3 drat4 drat5 drat6 drat7 drat8 drat9 drat10 drat11 drat12 3.850 3.080 3.150 2.760 3.210 3.690 3.920 3.920 3.920 3.070 drat13 drat14 drat15 drat16 drat17 drat18 drat19 drat20 drat21 drat22 3.070 3.070 2.930 3.000 3.230 4.080 4.930 4.220 3.700 2.760 drat23 drat24 drat25 drat26 drat27 drat28 drat29 drat30 drat31 drat32 3.150 3.730 3.080 4.080 4.430 3.770 4.220 3.620 3.540 4.110 wt1 wt2 wt3 wt4 wt5 wt6 wt7 wt8 wt9 wt10 2.620 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 wt11 wt12 wt13 wt14 wt15 wt16 wt17 wt18 wt19 wt20 3.440 4.070 3.730 3.780 5.250 5.424 5.345 2.200 1.615 1.835 wt21 wt22 wt23 wt24 wt25 wt26 wt27 wt28 wt29 wt30 2.465 3.520 3.435 3.840 3.845 1.935 2.140 1.513 3.170 2.770 wt31 wt32 qsec1 qsec2 qsec3 qsec4 qsec5 qsec6 qsec7 qsec8 3.570 2.780 16.460 17.020 18.610 19.440 17.020 20.220 15.840 20.000 qsec9 qsec10 qsec11 qsec12 qsec13 qsec14 qsec15 qsec16 qsec17 qsec18 22.900 18.300 18.900 17.400 17.600 18.000 17.980 17.820 17.420 19.470 qsec19 qsec20 qsec21 qsec22 qsec23 qsec24 qsec25 qsec26 qsec27 qsec28 18.520 19.900 20.010 16.870 17.300 15.410 17.050 18.900 16.700 16.900 qsec29 qsec30 qsec31 qsec32 vs1 vs2 vs3 vs4 vs5 vs6 14.500 15.500 14.600 18.600 0.000 0.000 1.000 1.000 0.000 1.000 vs7 vs8 vs9 vs10 vs11 vs12 vs13 vs14 vs15 vs16 0.000 1.000 1.000 1.000 1.000 0.000 0.000 0.000 0.000 0.000 vs17 vs18 vs19 vs20 vs21 vs22 vs23 vs24 vs25 vs26 0.000 1.000 1.000 1.000 1.000 0.000 0.000 0.000 0.000 1.000 vs27 vs28 vs29 vs30 vs31 vs32 am1 am2 am3 am4 0.000 1.000 0.000 0.000 0.000 1.000 1.000 1.000 1.000 0.000 am5 am6 am7 am8 am9 am10 am11 am12 am13 am14 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 am15 am16 am17 am18 am19 am20 am21 am22 am23 am24 0.000 0.000 0.000 1.000 1.000 1.000 0.000 0.000 0.000 0.000 am25 am26 am27 am28 am29 am30 am31 am32 gear1 gear2 0.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 4.000 4.000 gear3 gear4 gear5 gear6 gear7 gear8 gear9 gear10 gear11 gear12 4.000 3.000 3.000 3.000 3.000 4.000 4.000 4.000 4.000 3.000 gear13 gear14 gear15 gear16 gear17 gear18 gear19 gear20 gear21 gear22 3.000 3.000 3.000 3.000 3.000 4.000 4.000 4.000 3.000 3.000 gear23 gear24 gear25 gear26 gear27 gear28 gear29 gear30 gear31 gear32 3.000 3.000 3.000 4.000 5.000 5.000 5.000 5.000 5.000 4.000 carb1 carb2 carb3 carb4 carb5 carb6 carb7 carb8 carb9 carb10 4.000 4.000 1.000 1.000 2.000 1.000 4.000 2.000 2.000 4.000 carb11 carb12 carb13 carb14 carb15 carb16 carb17 carb18 carb19 carb20 4.000 3.000 3.000 3.000 4.000 4.000 4.000 1.000 2.000 1.000 carb21 carb22 carb23 carb24 carb25 carb26 carb27 carb28 carb29 carb30 1.000 2.000 2.000 4.000 2.000 1.000 2.000 2.000 4.000 6.000 carb31 carb32 8.000 2.000 . head(mtcars) . mpgcyldisphpdratwtqsecvsamgearcarb . Mazda RX421.0 | 6 | 160 | 110 | 3.90 | 2.620 | 16.46 | 0 | 1 | 4 | 4 | . Mazda RX4 Wag21.0 | 6 | 160 | 110 | 3.90 | 2.875 | 17.02 | 0 | 1 | 4 | 4 | . Datsun 71022.8 | 4 | 108 | 93 | 3.85 | 2.320 | 18.61 | 1 | 1 | 4 | 1 | . Hornet 4 Drive21.4 | 6 | 258 | 110 | 3.08 | 3.215 | 19.44 | 1 | 0 | 3 | 1 | . Hornet Sportabout18.7 | 8 | 360 | 175 | 3.15 | 3.440 | 17.02 | 0 | 0 | 3 | 2 | . Valiant18.1 | 6 | 225 | 105 | 2.76 | 3.460 | 20.22 | 1 | 0 | 3 | 1 | . print(UCmtcars) print(c(mtcars)) # similar to unclass but without the attributes . $mpg [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 [31] 15.0 21.4 $cyl [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 $disp [1] 160.0 160.0 108.0 258.0 360.0 225.0 360.0 146.7 140.8 167.6 167.6 275.8 [13] 275.8 275.8 472.0 460.0 440.0 78.7 75.7 71.1 120.1 318.0 304.0 350.0 [25] 400.0 79.0 120.3 95.1 351.0 145.0 301.0 121.0 $hp [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 [20] 65 97 150 150 245 175 66 91 113 264 175 335 109 $drat [1] 3.90 3.90 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 3.92 3.07 3.07 3.07 2.93 [16] 3.00 3.23 4.08 4.93 4.22 3.70 2.76 3.15 3.73 3.08 4.08 4.43 3.77 4.22 3.62 [31] 3.54 4.11 $wt [1] 2.620 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 3.440 4.070 [13] 3.730 3.780 5.250 5.424 5.345 2.200 1.615 1.835 2.465 3.520 3.435 3.840 [25] 3.845 1.935 2.140 1.513 3.170 2.770 3.570 2.780 $qsec [1] 16.46 17.02 18.61 19.44 17.02 20.22 15.84 20.00 22.90 18.30 18.90 17.40 [13] 17.60 18.00 17.98 17.82 17.42 19.47 18.52 19.90 20.01 16.87 17.30 15.41 [25] 17.05 18.90 16.70 16.90 14.50 15.50 14.60 18.60 $vs [1] 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1 $am [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 $gear [1] 4 4 4 3 3 3 3 4 4 4 4 3 3 3 3 3 3 4 4 4 3 3 3 3 3 4 5 5 5 5 5 4 $carb [1] 4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 6 8 2 attr(,&#34;row.names&#34;) [1] &#34;Mazda RX4&#34; &#34;Mazda RX4 Wag&#34; &#34;Datsun 710&#34; [4] &#34;Hornet 4 Drive&#34; &#34;Hornet Sportabout&#34; &#34;Valiant&#34; [7] &#34;Duster 360&#34; &#34;Merc 240D&#34; &#34;Merc 230&#34; [10] &#34;Merc 280&#34; &#34;Merc 280C&#34; &#34;Merc 450SE&#34; [13] &#34;Merc 450SL&#34; &#34;Merc 450SLC&#34; &#34;Cadillac Fleetwood&#34; [16] &#34;Lincoln Continental&#34; &#34;Chrysler Imperial&#34; &#34;Fiat 128&#34; [19] &#34;Honda Civic&#34; &#34;Toyota Corolla&#34; &#34;Toyota Corona&#34; [22] &#34;Dodge Challenger&#34; &#34;AMC Javelin&#34; &#34;Camaro Z28&#34; [25] &#34;Pontiac Firebird&#34; &#34;Fiat X1-9&#34; &#34;Porsche 914-2&#34; [28] &#34;Lotus Europa&#34; &#34;Ford Pantera L&#34; &#34;Ferrari Dino&#34; [31] &#34;Maserati Bora&#34; &#34;Volvo 142E&#34; $mpg [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 [31] 15.0 21.4 $cyl [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 $disp [1] 160.0 160.0 108.0 258.0 360.0 225.0 360.0 146.7 140.8 167.6 167.6 275.8 [13] 275.8 275.8 472.0 460.0 440.0 78.7 75.7 71.1 120.1 318.0 304.0 350.0 [25] 400.0 79.0 120.3 95.1 351.0 145.0 301.0 121.0 $hp [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 [20] 65 97 150 150 245 175 66 91 113 264 175 335 109 $drat [1] 3.90 3.90 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 3.92 3.07 3.07 3.07 2.93 [16] 3.00 3.23 4.08 4.93 4.22 3.70 2.76 3.15 3.73 3.08 4.08 4.43 3.77 4.22 3.62 [31] 3.54 4.11 $wt [1] 2.620 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 3.440 4.070 [13] 3.730 3.780 5.250 5.424 5.345 2.200 1.615 1.835 2.465 3.520 3.435 3.840 [25] 3.845 1.935 2.140 1.513 3.170 2.770 3.570 2.780 $qsec [1] 16.46 17.02 18.61 19.44 17.02 20.22 15.84 20.00 22.90 18.30 18.90 17.40 [13] 17.60 18.00 17.98 17.82 17.42 19.47 18.52 19.90 20.01 16.87 17.30 15.41 [25] 17.05 18.90 16.70 16.90 14.50 15.50 14.60 18.60 $vs [1] 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1 $am [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 $gear [1] 4 4 4 3 3 3 3 4 4 4 4 3 3 3 3 3 3 4 4 4 3 3 3 3 3 4 5 5 5 5 5 4 $carb [1] 4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 6 8 2 . Operators . Assignment Operators (&lt;− = &lt;&lt;− -&gt; -&gt;&gt;) Arithmetic Operators (+ - * / %% (modulo) %/%(integer divide) ^(raised to the power of)) Relational Operators(&gt; &lt; &lt;= &gt;= == != ) Logical Operators (&amp; | ! &amp;&amp; ||) Miscellaneous Operators (: %in% %*%) . Assignment operators: . a &lt;- 5.67 print(a) b = &#39;data&#39; print(b) 6+5i -&gt; c print(c) . [1] 5.67 [1] &#34;data&#34; [1] 6+5i . make.accumulator&lt;-function(){ a&lt;-0 function(x) { a&lt;-a+x a } } f&lt;-make.accumulator() print(f(1)) print(f(2)) . [1] 1 [1] 2 . It&#39;s the &#39;superassignment&#39; operator. It does the assignment in the enclosing environment. That is, starting with the enclosing frame, it works its way up towards the global environment . make.accumulator&lt;-function(){ a&lt;-0 function(x) { a&lt;&lt;-a+x a } } f&lt;-make.accumulator() print(f(1)) print(f(2)) . [1] 1 [1] 3 . Arithmetic operators: . Arithmetic Operators . Operator Description Example . Subtraction 5 - 1 = 4 | Addition 5 + 1 = 6 | Multiplication 5 3 = 15 / Division 10 / 2 = 5 ^ or ** Exponentiation 2222*2 as 2 to the power of 5 x%%y Modulus 5%%2 is 1 x%/%y Integer Division 5%/%2 is 2 | . print(5 + 1) print(5 - 1) print(5 * 3) print(2^5) print(2**5) print(5 / 2) print(5%/%2) # Integer Division print(5%%2) # Modulus or reminder . [1] 6 [1] 4 [1] 15 [1] 32 [1] 32 [1] 2.5 [1] 2 [1] 1 . Relational operators: . Description Binary operators which allow the comparison of values in atomic vectors. . Operator Description Example &lt; less than 5 &lt; 10 &lt;= less than or equal to &lt;= 5 . greater than 10 &gt; 5 . = greater than or equal to &gt;= 10 == exactly equal to == 10 != not equal to != 5 . x &lt;- 5 y &lt;- -3 print(x &lt; y) print(x &gt; y) print(x &lt;= y) print(x &gt;= y) print(x == y) print(x != y) . [1] FALSE [1] TRUE [1] FALSE [1] TRUE [1] FALSE [1] TRUE . Logical operators: . Operator Description Example !x not x x &lt;- c(5), !x x | y x or y x &lt;- c(5), y &lt;- c(10), x | y x &amp; y x and y x &lt;- c(5), y &lt;- c(10), x &amp; y . Logical AND (&amp;&amp;) and Logical OR (||) . v &lt;- c(3,0,TRUE,2+2i) t &lt;- c(1,3,TRUE,2+3i) print(v&amp;&amp;t) . [1] TRUE . v &lt;- c(0,0,TRUE,2+2i) t &lt;- c(0,3,TRUE,2+3i) print(v||t) . [1] FALSE . Miscellaneous operators: . (: %in% %*%) . : Operator . print(2:10) print(-2:-10) print(2:10) . [1] 2 3 4 5 6 7 8 9 10 [1] -2 -3 -4 -5 -6 -7 -8 -9 -10 [1] 2 3 4 5 6 7 8 9 10 . %in% Operator . v1 &lt;- 8 v2 &lt;- 12 t &lt;- 1:10 print(v1 %in% t) print(v2 %in% t) . [1] TRUE [1] FALSE . %*% Operator . a &lt;- matrix(1:9, 3, 3) b &lt;- matrix(-1:-9, 3, 3) print(a) print(b) . [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 [,1] [,2] [,3] [1,] -1 -4 -7 [2,] -2 -5 -8 [3,] -3 -6 -9 . print(a*b) . [,1] [,2] [,3] [1,] -1 -16 -49 [2,] -4 -25 -64 [3,] -9 -36 -81 . print(a%*%b) . [,1] [,2] [,3] [1,] -30 -66 -102 [2,] -36 -81 -126 [3,] -42 -96 -150 . print(1*-1 + 4*-2 + 7*-3) print(1*-4 + 4*-5 + 7*-6) . [1] -30 [1] -66 . Special values NA, NULL, ±Inf and NaN . # NA Stands for not available # NA is a placeholder for a missing value . print(NA + 2) print(sum(c(NA, 4, 6))) print(median(c(NA, 4, 8, 4), na.rm = TRUE)) print(length(c(NA, 2, 3, 4))) print(5 == NA) print(NA == NA) print(TRUE | NA) . [1] NA [1] NA [1] 4 [1] 4 [1] NA [1] NA [1] TRUE . x &lt;- c(2,NA,5,4.89,10,TRUE,6/7) is.na(x) . &lt;ol class=list-inline&gt; FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | &lt;/ol&gt; NULL . The class of NULL is null and has length 0 | Does not take up any space in a vector | The function is.null() can be used to detect NULL variables. | . print(length(c(3, 4, NULL, 1))) print(sum(c(5, 1, NULL, 4))) x &lt;- NULL print(c(x, 5)) . [1] 3 [1] 10 [1] 5 . Inf . Inf is a valid numeric that results from calculations like division of a number by zero. | Since Inf is a numeric, operations between Inf and a finite numeric are well-defined and comparison operators work as expected. | . print(32/0) print(5 * Inf) print(Inf - 2e+10) print(Inf + Inf) 8 &lt; -Inf print(Inf == Inf) . [1] Inf [1] Inf [1] Inf [1] Inf . FALSE [1] TRUE . NaN . Stands for not a number. | unknown resulsts, but it is surely not a number | e.g like 0/0, Inf-Inf and Inf/Inf result in NaN | Computations involving numbers and NaN always result in NaN | . NaN + 1 exp(NaN) . NaN NaN Help: https://www.r-bloggers.com/ . Coercion and Testing an Object: . Internal (implicit) coercion External coercion and testing objects . Internal (implicit) coercion: If the two arguments are atomic vectors of different modes, one is coerced to the type of the other, the (decreasing) order of precedence being character, complex, numeric, integer, logical . . Guess what the following do without running them first . {r} xx &lt;- c(1.7, &quot;a&quot;) xx &lt;- c(TRUE, 2) xx &lt;- c(&quot;a&quot;, TRUE) This is called implicit coercion. . print(c(1, FALSE)) # numeric 1, 0 print(mode(c(1, FALSE))) print(c(&quot;a&quot;, 1)) # character &#39;a&#39;, &#39;1&#39; print(mode(c(&quot;a&quot;, 1))) print(c(TRUE, 1L)) print(mode(c(TRUE, 1L))) # numeric 1, 1 print(c(3.427, 1L)) print(mode(c(3.427, 1L))) . [1] 1 0 [1] &#34;numeric&#34; [1] &#34;a&#34; &#34;1&#34; [1] &#34;character&#34; [1] 1 1 [1] &#34;numeric&#34; [1] 3.427 1.000 [1] &#34;numeric&#34; . External coercion and testing objects: These following function will be used to test the object and convert to another object with coercing . . while testing the objects Use is.atomic() to test if an object is either atomic vector or is.recursive() || is.list() for recursive list. is.atomic() is more suitable for testing if an object is a vector. is.list() tests whether an object is truly a list. is.numeric(), similarly, is TRUE for either integer or double vectors, but not for lists. Help: https://bookdown.org/ . Control Structures &amp; Loops . (decision making statements) . if . If Condition . IF statement associates a condition with a sequence of statements, The sequence of statements is executed only if the condition is true. If the condition is false or null, the IF statement does nothing. In either case, control passes to the next statement** . num1=10 num2=20 if(num1&lt;=num2) { print(&quot;Num1 is less or equal to Num2&quot;) } . [1] &#34;Num1 is less or equal to Num2&#34; . if else . x &lt;- 1:15 if (sample(x, 1) &lt;= 10) { print(&quot;x is less than 10&quot;) } else { print(&quot;x is greater than 10&quot;) } . [1] &#34;x is less than 10&#34; . Another way of ifelse in R: . x &lt;- 1:15 ifelse(x &lt;= 10, &quot;x less than 10&quot;, &quot;x greater than 10&quot;) . &lt;ol class=list-inline&gt; &#39;x less than 10&#39; | &#39;x less than 10&#39; | &#39;x less than 10&#39; | &#39;x less than 10&#39; | &#39;x less than 10&#39; | &#39;x less than 10&#39; | &#39;x less than 10&#39; | &#39;x less than 10&#39; | &#39;x less than 10&#39; | &#39;x less than 10&#39; | &#39;x greater than 10&#39; | &#39;x greater than 10&#39; | &#39;x greater than 10&#39; | &#39;x greater than 10&#39; | &#39;x greater than 10&#39; | &lt;/ol&gt; . If else if . x &lt;- c(&quot;what&quot;,&quot;is&quot;,&quot;truth&quot;) if(&quot;Truth&quot; %in% x) { print(&quot;Truth is found the first time&quot;) } else if (&quot;truth&quot; %in% x) { print(&quot;truth is found the second time&quot;) } else { print(&quot;No truth found&quot;) } . [1] &#34;truth is found the second time&#34; . for . For Loop: To repeats a statement or group of for a fixed number of times. . vector &lt;- c(&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;) for(i in vector){ print(i) } . [1] &#34;aaa&#34; [1] &#34;bbb&#34; [1] &#34;ccc&#34; . for (year in c(2010,2011,2012,2013,2014,2015)){ print(paste(&quot;The year is&quot;, year)) } . [1] &#34;The year is 2010&#34; [1] &#34;The year is 2011&#34; [1] &#34;The year is 2012&#34; [1] &#34;The year is 2013&#34; [1] &#34;The year is 2014&#34; [1] &#34;The year is 2015&#34; . for(i in 2:5){ z &lt;- i +1 print(z) } . [1] 3 [1] 4 [1] 5 [1] 6 . mymat &lt;- matrix(1:9,3,3) print(mymat) for (i in seq_len(nrow(mymat))){ for (j in seq_len(ncol(mymat))){ print(mymat[i,j]) } } . [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 [1] 1 [1] 4 [1] 7 [1] 2 [1] 5 [1] 8 [1] 3 [1] 6 [1] 9 . while . While Loop: Loop until a specific condition is met . i &lt;- 1 while (i &lt; 6) { print(i) i = i+1 } . [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 . break . break Statement: break is used inside any loop like repeat, for or while to stop the iterations and flow the control outside of the loop. . x &lt;- 1:5 for (val in x) { if (val == 3){ break } print(val) } . [1] 1 [1] 2 . x &lt;- 1:10 for (num in x){ if (num==6) break mynum &lt;- paste(num, &quot;and so on. &quot;, sep = &quot; &quot;) print(mynum) } . [1] &#34;1 and so on. &#34; [1] &#34;2 and so on. &#34; [1] &#34;3 and so on. &#34; [1] &#34;4 and so on. &#34; [1] &#34;5 and so on. &#34; . repeat . Repeat statement: Iterate over a block of code multiple number of times. . x &lt;- 1 repeat { print(x) x = x+1 if (x == 6){ break } } . [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 . next . next Statment: . Useful to controls the flow of R loops | general usage inside the For Loop and While Loop | . x &lt;- 1:5 for (val in x) { if (val == 3){ next } print(val) } . [1] 1 [1] 2 [1] 4 [1] 5 . switch . Switch Statment: switch statement allows a variable to be tested for equality against a list of values. Each value is called a case . number1 &lt;- 30 number2 &lt;- 20 operator &lt;- readline(prompt=&quot;Please enter any ARITHMETIC OPERATOR You wish!: &quot;) switch(operator, &quot;+&quot; = print(paste(&quot;Addition of two numbers is: &quot;, number1 + number2)), &quot;-&quot; = print(paste(&quot;Subtraction of two numbers is: &quot;, number1 - number2)), &quot;*&quot; = print(paste(&quot;Multiplication of two numbers is: &quot;, number1 * number2)), &quot;^&quot; = print(paste(&quot;Exponent of two numbers is: &quot;, number1 ^ number2)), &quot;/&quot; = print(paste(&quot;Division of two numbers is: &quot;, number1 / number2)), &quot;%/%&quot; = print(paste(&quot;Integer Division of two numbers is: &quot;, number1 %/% number2)), &quot;%%&quot; = print(paste(&quot;Division of two numbers is: &quot;, number1 %% number2)) ) . **Conclusion** . Loops are not recommended until and unless its really needed, since R has vectorisation feature . Vectorization concept . vect &lt;- c(1,2,3,4,5,6,7,9) # now we multiply each element of vect with 5 print(vect * 5) # now we add each element of vect with 5 print(vect + 5) # now we subtract each element of vect with 5 print(vect - 5) . [1] 5 10 15 20 25 30 35 45 [1] 6 7 8 9 10 11 12 14 [1] -4 -3 -2 -1 0 1 2 4 . recycling concept . a &lt;- 1:10 b &lt;- 1:5 a + b . &lt;ol class=list-inline&gt; 2 | 4 | 6 | 8 | 10 | 7 | 9 | 11 | 13 | 15 | &lt;/ol&gt; a &lt;- 1:10 b &lt;- 5 a * b # here b is a vector of length 1 . &lt;ol class=list-inline&gt; 5 | 10 | 15 | 20 | 25 | 30 | 35 | 40 | 45 | 50 | &lt;/ol&gt; Functions . Functions: . Functions can be described as ”black boxes” that take an input and print out an output based on the operation logic inside the function . Built-in functions . used by the user to make their work easier. Eg:mean(x), sum(x) ,sqrt(x),toupper(x), etc. . Some Built-in functions for the Objects . Function Description . c() | combines values, vectors, and/or lists to create new objects | . unique() | returns a vector containing one element for each unique value in the vector | . duplicated() | returns a logical vector which tells if elements of a vector are duplicated with regard to previous one | . rev() | reverse the order of element in a vector | . sort() | sorts the elements in a vector | . append() | append or insert elements in a vector. | . sum() | sum of the elements of a vector | . min() | minimum value in a vector | . max() | maximum value in a vector | . cumsum | cumulative sum | . diff | x[i+1] - x[i] | . prod | product | . cumprod | cumulative product | . sample | random sample | . mean | average | . median | median | . var | variance | . sd | standard deviation | . Function Description . abs(x) | absolute value (magnitude of numbers regardless of whether or not they are positive, magnitude of -21 &gt; magnitude of 19. That magnitude is called an absolute) | . sqrt(x) | square root | . floor(x) | floor(3.975) is 3 | . ceiling(x) | ceiling(3.475) is 4 | . trunc(x) | trunc(5.99) is 5 | . round(x, digits=n) | round(3.475, digits=2) is 3.48 | . exp(x) | e^x (calculate the power of e i.e. e^x) | . log10(x) | common logarithm (base 10) | . log(x) | natural logarithm (base e) | . strsplit(x, split) | Split the elements of character vector x at split.strsplit(&quot;abc&quot;, &quot;&quot;) returns 3 element vector &quot;a&quot;,&quot;b&quot;,&quot;c&quot; | . toupper(x) | Uppercase | . tolower(x) | Lowercase | . Functions Examples . {r} (x &lt;- c(sort(sample(1:20, 9)), NA)) (y &lt;- c(sort(sample(3:23, 7)), NA)) which.min(x) which.max(x) union(x, y) intersect(x, y) setdiff(x, y) setdiff(y, x) match(x,y) . User defined functions . Sets of instructions that you want to use repeatedly, it is a piece of code written to carry out a specified task, these functions are created by the user to meet a specific requirement of the user. . Function Name | Arguments | Function Body | Return Value | . Objects &amp; Functions To understand in R two slogans are helpful: . Everything that exists is an object | Everything that happens is a function call | syntax . {r} function_name &lt;–function(arg_1, arg_2, …) { //Function body } . sum_of_squares &lt;- function(x,y) { x^2 + y^2 } . sum_of_squares(3,4) . 25 pow &lt;- function(x, y) { result &lt;- x^y print(paste(x,&quot;raised to the power&quot;, y, &quot;is&quot;, result)) } . pow(3,5) . [1] &#34;3 raised to the power 5 is 243&#34; . Default Arguments: . new.function &lt;- function(a = 3, b = 6) { result &lt;- a * b print(result) } # Call the function without giving any argument. new.function() # Call the function with giving new values of the argument. new.function(9,5) . [1] 18 [1] 45 . # Sets default of exponent to 2 (just square) MyThirdFun &lt;- function(n, y = 2) { # Compute the power of n to the y n^y } # Specify both args MyThirdFun(2,3) # Just specify the first arg MyThirdFun(2) # Specify no argument: error! # MyThirdFun() . 8 4 Named Arguments: . pow &lt;- function(x, y) { # function to print x raised to the power y result &lt;- x^y print(paste(x,&quot;raised to the power&quot;, y, &quot;is&quot;, result)) } . pow(8, 2) # 8 raised to the power 2 is 64 pow(x = 8, y = 2) # 8 raised to the power 2 is 64 pow(y = 2, x = 8) . [1] &#34;8 raised to the power 2 is 64&#34; [1] &#34;8 raised to the power 2 is 64&#34; [1] &#34;8 raised to the power 2 is 64&#34; . partial matching: . ?round . Round {base} | R Documentation | . Rounding of Numbers . Description . ceiling takes a single numeric argument x and returns a numeric vector containing the smallest integers not less than the corresponding elements of x. . floor takes a single numeric argument x and returns a numeric vector containing the largest integers not greater than the corresponding elements of x. . trunc takes a single numeric argument x and returns a numeric vector containing the integers formed by truncating the values in x toward 0. . round rounds the values in its first argument to the specified number of decimal places (default 0). See &lsquo;Details&rsquo; about &ldquo;round to even&rdquo; when rounding off a 5. . signif rounds the values in its first argument to the specified number of significant digits. . Usage . ceiling(x) floor(x) trunc(x, ...) round(x, digits = 0) signif(x, digits = 6) . Arguments . x | a numeric vector. Or, for round and signif, a complex vector. . | . digits | integer indicating the number of decimal places (round) or significant digits (signif) to be used. Negative values are allowed (see &lsquo;Details&rsquo;). . | . ... | arguments to be passed to methods. . | . Details . These are generic functions: methods can be defined for them individually or via the Math group generic. . Note that for rounding off a 5, the IEC 60559 standard (see also &lsquo;IEEE 754&rsquo;) is expected to be used, &lsquo;go to the even digit&rsquo;. Therefore round(0.5) is 0 and round(-1.5) is -2. However, this is dependent on OS services and on representation error (since e.g. 0.15 is not represented exactly, the rounding rule applies to the represented number and not to the printed number, and so round(0.15, 1) could be either 0.1 or 0.2). . Rounding to a negative number of digits means rounding to a power of ten, so for example round(x, digits = -2) rounds to the nearest hundred. . For signif the recognized values of digits are 1...22, and non-missing values are rounded to the nearest integer in that range. Complex numbers are rounded to retain the specified number of digits in the larger of the components. Each element of the vector is rounded individually, unlike printing. . These are all primitive functions. . S4 methods . These are all (internally) S4 generic. . ceiling, floor and trunc are members of the Math group generic. As an S4 generic, trunc has only one argument. . round and signif are members of the Math2 group generic. . Warning . The realities of computer arithmetic can cause unexpected results, especially with floor and ceiling. For example, we &lsquo;know&rsquo; that floor(log(x, base = 8)) for x = 8 is 1, but 0 has been seen on an R platform. It is normally necessary to use a tolerance. . References . Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth &amp; Brooks/Cole. . The ISO/IEC/IEEE 60559:2011 standard is available for money from https://www.iso.org. . The IEEE 745:2008 standard is more openly documented, e.g, at https://en.wikipedia.org/wiki/IEEE_754. . See Also . as.integer. . Examples . round(.5 + -2:4) # IEEE / IEC rounding: -2 0 0 2 2 4 4 ## (this is *good* behaviour -- do *NOT* report it as bug !) ( x1 &lt;- seq(-2, 4, by = .5) ) round(x1) #-- IEEE / IEC rounding ! x1[trunc(x1) != floor(x1)] x1[round(x1) != floor(x1 + .5)] (non.int &lt;- ceiling(x1) != floor(x1)) x2 &lt;- pi * 100^(-1:3) round(x2, 3) signif(x2, 3) . . [Package base version 3.6.1 ] print(round(9.523, d=2)) print(round(9.523, di=2)) print(round(9.523, dig=2)) . [1] 9.52 [1] 9.52 [1] 9.52 . testFun &lt;- function(axb, bcd = 1, axdk) { return(axb + axdk) } . testFun(ax=2,ax=3) . testFun(axb=2,ax = 3) . 5 Functions in R are first class objects . can be treated as much like any other objects | Can be passed as arguments to othre functions | Can be nested so that you can define a function in another function | Return value is the last expression in the function body | . Lazy evaluation . Materalize only when necessary | Data is not loaded until its needed | increase spped &amp; saving computaions | . fun &lt;- function(a,b){ a^2 } fun(2,x/0) . 4 fun &lt;- function(x){ 10 } fun(&quot;hello&quot;) . 10 Automatic Returns: . In R, it is not necessary to include the return statement. R automatically returns whichever variable is on the last line of the body of the function. OR we can explicitly define the return statement. . add &lt;- function(x,y=1,z=2){ x+y x+z } add(5) . 7 add &lt;- function(x,y=1,z=2){ x+y x+z return(x+y) } add(5) . 6 fahr_to_kelvin &lt;- function(temp) { kelvin &lt;- ((temp - 32) * (5 / 9)) + 273.15 return(kelvin) } . fahr_to_kelvin(32) # boiling point of water fahr_to_kelvin(212) . 273.15 373.15 elipses or three dots (...) . which is especially useful for creating customized versions of existing functions or in providing additional options to end-users. | Pass arguments to another function | These three dots (an ellipsis) act as a placeholder for any extra arguments given to the function | Take any number of named or unnamed arguments | . printDots &lt;- function(...) { myDots &lt;- list(...) paste(myDots) } printDots(&quot;how&quot;, &quot;is&quot;, &quot;your&quot;, &quot;health&quot;) . &lt;ol class=list-inline&gt; &#39;how&#39; | &#39;is&#39; | &#39;your&#39; | &#39;health&#39; | &lt;/ol&gt; Named AND Anonymous (nameless) functions: . named &lt;- function(x) x*10 # calling a named function named(6) . 60 (function(x) x*10)(6) # . 60 Apply family functions . apply family functions pertains to the R base package and is populated with functions to manipulate slices of data from matrices, arrays, lists and dataframes in a repetitive way. These functions allow crossing the data in a number of ways and avoid explicit use of loop constructs. . head(mtcars) . mpgcyldisphpdratwtqsecvsamgearcarb . Mazda RX421.0 | 6 | 160 | 110 | 3.90 | 2.620 | 16.46 | 0 | 1 | 4 | 4 | . Mazda RX4 Wag21.0 | 6 | 160 | 110 | 3.90 | 2.875 | 17.02 | 0 | 1 | 4 | 4 | . Datsun 71022.8 | 4 | 108 | 93 | 3.85 | 2.320 | 18.61 | 1 | 1 | 4 | 1 | . Hornet 4 Drive21.4 | 6 | 258 | 110 | 3.08 | 3.215 | 19.44 | 1 | 0 | 3 | 1 | . Hornet Sportabout18.7 | 8 | 360 | 175 | 3.15 | 3.440 | 17.02 | 0 | 0 | 3 | 2 | . Valiant18.1 | 6 | 225 | 105 | 2.76 | 3.460 | 20.22 | 1 | 0 | 3 | 1 | . dim(mtcars) . &lt;ol class=list-inline&gt; 32 | 11 | &lt;/ol&gt; str(mtcars) . &#39;data.frame&#39;: 32 obs. of 11 variables: $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... $ disp: num 160 160 108 258 360 ... $ hp : num 110 110 93 110 175 105 245 62 95 123 ... $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... $ wt : num 2.62 2.88 2.32 3.21 3.44 ... $ qsec: num 16.5 17 18.6 19.4 17 ... $ vs : num 0 0 1 1 0 1 0 1 1 1 ... $ am : num 1 1 1 0 0 0 0 0 0 0 ... $ gear: num 4 4 4 3 3 3 3 4 4 4 ... $ carb: num 4 4 1 1 2 1 4 2 2 4 ... . # one method max(mtcars[,1]) max(mtcars[,2]) max(mtcars[,3]) max(mtcars[,4]) max(mtcars[,5]) #...etc . 33.9 8 472 335 4.93 for (i in 1:ncol(mtcars)) { col &lt;- mtcars[,i] max &lt;- max(col) print(max) } . [1] 33.9 [1] 8 [1] 472 [1] 335 [1] 4.93 [1] 5.424 [1] 22.9 [1] 1 [1] 1 [1] 5 [1] 8 . apply - apply over the margins of an array (e.g. the rows or columns of a matrix) | lapply - apply a function to each element of a list in turn and get a list back. | sapply - apply a function to each element of a list and get a simplified object like vector back, rather than a list. | tapply - apply a function to subsets of a vector and the subsets are defined by some other vector, usually a factor. | mapply - apply a function to the 1st elements of each, and then the 2nd elements of each, etc | . . apply . apply function: . When you want to apply a function to the rows or columns of a matrix (and higherdimensional analogues); | . ?apply #take help . apply {base} | R Documentation | . Apply Functions Over Array Margins . Description . Returns a vector or array or list of values obtained by applying a function to margins of an array or matrix. . Usage . apply(X, MARGIN, FUN, ...) . Arguments . X | an array, including a matrix. . | . MARGIN | a vector giving the subscripts which the function will be applied over. E.g., for a matrix 1 indicates rows, 2 indicates columns, c(1, 2) indicates rows and columns. Where X has named dimnames, it can be a character vector selecting dimension names. . | . FUN | the function to be applied: see &lsquo;Details&rsquo;. In the case of functions like +, %*%, etc., the function name must be backquoted or quoted. . | . ... | optional arguments to FUN. . | . Details . If X is not an array but an object of a class with a non-null dim value (such as a data frame), apply attempts to coerce it to an array via as.matrix if it is two-dimensional (e.g., a data frame) or via as.array. . FUN is found by a call to match.fun and typically is either a function or a symbol (e.g., a backquoted name) or a character string specifying a function to be searched for from the environment of the call to apply. . Arguments in ... cannot have the same name as any of the other arguments, and care may be needed to avoid partial matching to MARGIN or FUN. In general-purpose code it is good practice to name the first three arguments if ... is passed through: this both avoids partial matching to MARGIN or FUN and ensures that a sensible error message is given if arguments named X, MARGIN or FUN are passed through .... . Value . If each call to FUN returns a vector of length n, then apply returns an array of dimension c(n, dim(X)[MARGIN]) if n &gt; 1. If n equals 1, apply returns a vector if MARGIN has length 1 and an array of dimension dim(X)[MARGIN] otherwise. If n is 0, the result has length 0 but not necessarily the &lsquo;correct&rsquo; dimension. . If the calls to FUN return vectors of different lengths, apply returns a list of length prod(dim(X)[MARGIN]) with dim set to MARGIN if this has length greater than one. . In all cases the result is coerced by as.vector to one of the basic vector types before the dimensions are set, so that (for example) factor results will be coerced to a character array. . References . Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth &amp; Brooks/Cole. . See Also . lapply and there, simplify2array; tapply, and convenience functions sweep and aggregate. . Examples . ## Compute row and column sums for a matrix: x &lt;- cbind(x1 = 3, x2 = c(4:1, 2:5)) dimnames(x)[[1]] &lt;- letters[1:8] apply(x, 2, mean, trim = .2) col.sums &lt;- apply(x, 2, sum) row.sums &lt;- apply(x, 1, sum) rbind(cbind(x, Rtot = row.sums), Ctot = c(col.sums, sum(col.sums))) stopifnot( apply(x, 2, is.vector)) ## Sort the columns of a matrix apply(x, 2, sort) ## keeping named dimnames names(dimnames(x)) &lt;- c(&quot;row&quot;, &quot;col&quot;) x3 &lt;- array(x, dim = c(dim(x),3), dimnames = c(dimnames(x), list(C = paste0(&quot;cop.&quot;,1:3)))) identical(x, apply( x, 2, identity)) identical(x3, apply(x3, 2:3, identity)) ##- function with extra args: cave &lt;- function(x, c1, c2) c(mean(x[c1]), mean(x[c2])) apply(x, 1, cave, c1 = &quot;x1&quot;, c2 = c(&quot;x1&quot;,&quot;x2&quot;)) ma &lt;- matrix(c(1:4, 1, 6:8), nrow = 2) ma apply(ma, 1, table) #--&gt; a list of length 2 apply(ma, 1, stats::quantile) # 5 x n matrix with rownames stopifnot(dim(ma) == dim(apply(ma, 1:2, sum))) ## Example with different lengths for each call z &lt;- array(1:24, dim = 2:4) zseq &lt;- apply(z, 1:2, function(x) seq_len(max(x))) zseq ## a 2 x 3 matrix typeof(zseq) ## list dim(zseq) ## 2 3 zseq[1,] apply(z, 3, function(x) seq_len(max(x))) # a list without a dim attribute . . [Package base version 3.6.1 ] apply(mtcars, 2, max) . &lt;dl class=dl-horizontal&gt; mpg 33.9 cyl 8 disp 472 hp 335 drat 4.93 wt 5.424 qsec 22.9 vs 1 am 1 gear 5 carb 8 &lt;/dl&gt; apply(mtcars, 1, max) . &lt;dl class=dl-horizontal&gt; Mazda RX4 160 Mazda RX4 Wag 160 Datsun 710 108 Hornet 4 Drive 258 Hornet Sportabout 360 Valiant 225 Duster 360 360 Merc 240D 146.7 Merc 230 140.8 Merc 280 167.6 Merc 280C 167.6 Merc 450SE 275.8 Merc 450SL 275.8 Merc 450SLC 275.8 Cadillac Fleetwood 472 Lincoln Continental 460 Chrysler Imperial 440 Fiat 128 78.7 Honda Civic 75.7 Toyota Corolla 71.1 Toyota Corona 120.1 Dodge Challenger 318 AMC Javelin 304 Camaro Z28 350 Pontiac Firebird 400 Fiat X1-9 79 Porsche 914-2 120.3 Lotus Europa 113 Ford Pantera L 351 Ferrari Dino 175 Maserati Bora 335 Volvo 142E 121 &lt;/dl&gt; lapply . When you want to apply a function to each element of a list/vector in turn and get a list back | . lapply(1:3, function(x) x^2) . 1 | 4 | 9 | class(lapply(1:3, function(x) x^2) ) . &#39;list&#39; CAGO.list &lt;- list(Diet1 = c(2,5,4,3,5,3), Diet2 =c(8,5,6,5,7,7), Diet3 =c(3,4,2,5,2,6) , Diet4 = c(2,2,3,2,5,2)) . lapply(CAGO.list, mean) . $Diet1 3.66666666666667 $Diet2 6.33333333333333 $Diet3 3.66666666666667 $Diet4 2.66666666666667 convert list to data frame and check whether lapply() is working for data frames or not | . CAGO.df &lt;- as.data.frame(CAGO.list) . CAGO.df . Diet1Diet2Diet3Diet4 . 2 | 8 | 3 | 2 | . 5 | 5 | 4 | 2 | . 4 | 6 | 2 | 3 | . 3 | 5 | 5 | 2 | . 5 | 7 | 2 | 5 | . 3 | 7 | 6 | 2 | . lapply(CAGO.df, mean) # without specifying margins it calculate as column wise . $Diet1 3.66666666666667 $Diet2 6.33333333333333 $Diet3 3.66666666666667 $Diet4 2.66666666666667 We can apply on vector as well using lappply() | . Random &lt;- c(&quot;This&quot;, &quot;Is&quot;, &quot;a&quot;, &quot;Random&quot;, &quot;Vector&quot;) lapply(Random,nchar) #To get number of character for each vector element from above object . 4 | 2 | 1 | 6 | 6 | lapply(Random,toupper) . &#39;THIS&#39; | &#39;IS&#39; | &#39;A&#39; | &#39;RANDOM&#39; | &#39;VECTOR&#39; | sapply . When you want to apply a function to each element of a list in turn, but you want a vector back, rather than a list | . sapply(1:3, function(x) x^2) . &lt;ol class=list-inline&gt; 1 | 4 | 9 | &lt;/ol&gt; class(sapply(1:3, function(x) x^2)) . &#39;numeric&#39; apply the sapply() function on the CAGO.list and CAGO.df | . print(sapply(CAGO.list, mean)) # output as a vector . Diet1 Diet2 Diet3 Diet4 3.666667 6.333333 3.666667 2.666667 . print(sapply(CAGO.df, mean)) # output as a vector . Diet1 Diet2 Diet3 Diet4 3.666667 6.333333 3.666667 2.666667 . tapply . Applies a function or operation on subset of the vector broken down by a given factor variable. . To understand clearly lets imagine you have height of 1000 people ( 500 male and 500 females), and you want to know the average height of males and females from this sample data. To deal with this problem you can group height by the gender, height of 500 males, and height of 500 females, and later calculate the average height for males and females. . tapply(mtcars$wt,mtcars$cyl,mean) . &lt;dl class=dl-horizontal&gt; 4 2.28572727272727 6 3.11714285714286 8 3.99921428571429 &lt;/dl&gt; head(iris) . Sepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies . 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 5.0 | 3.6 | 1.4 | 0.2 | setosa | . 5.4 | 3.9 | 1.7 | 0.4 | setosa | . tapply(iris$Sepal.Length,iris$Species,mean) . &lt;dl class=dl-horizontal&gt; setosa 5.006 versicolor 5.936 virginica 6.588 &lt;/dl&gt; mapply . Multivariate version of sapply It applies FUN to the first elements of each (…) argument, the second elements, the third elements, and so on. Note that the first argument of mapply() here is the name of a function Advisable when you have several data structures (e.g. vectors, lists) and you want to apply a function over elements . l1 &lt;- list(a = c(1:10), b = c(11:20)) l2 &lt;- list(c = c(21:30), d = c(31:40)) # sum the corresponding elements of l1 and l2 print(mapply(sum, l1$a, l1$b, l2$c, l2$d)) . [1] 64 68 72 76 80 84 88 92 96 100 . print(mapply(sum, l1)) #sum(c(1:10)) . a b 55 155 . print(mapply(sum, l1,l2)) #sum(c(1:10),c(21:30)) . a b 310 510 . print(mapply(sum, l1$a, l1$b)) . [1] 12 14 16 18 20 22 24 26 28 30 . Q1 &lt;- matrix(c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4)),4,4) # Print `Q1` print(Q1) # Or use `mapply()` Q2 &lt;- mapply(rep,1:4,4) # Print `Q2` print(Q2) . [,1] [,2] [,3] [,4] [1,] 1 2 3 4 [2,] 1 2 3 4 [3,] 1 2 3 4 [4,] 1 2 3 4 [,1] [,2] [,3] [,4] [1,] 1 2 3 4 [2,] 1 2 3 4 [3,] 1 2 3 4 [4,] 1 2 3 4 . mapply(rep, 1:4, 4:1) . &lt;ol class=list-inline&gt; 1 | 1 | 1 | 1 | &lt;/ol&gt; | &lt;ol class=list-inline&gt; 2 | 2 | 2 | &lt;/ol&gt; | &lt;ol class=list-inline&gt; 3 | 3 | &lt;/ol&gt; | 4 | Packages/Modules/Libraries . R has many packages prepared and conitniuosly maintaining and upgrading for the specific purpose of activities Eg: we can use stringr package used for various string related operations we can use dplyr package for data manipulation/cleaning/analysis we can use ggplot2 package for data visualization ....etc . To install any package we need internet connectivity for the machine and use install.packages(&quot;package name&quot;) . Eg: install.packages(&quot;stringr&quot;) . To load the installed package for the current session we should use library(Package_Name) . Eg: library(stringr) . List of CRAN Packages By Name Basic commands for managing R packages .",
            "url": "http://www.endtoendprojects.com/r/2022/02/20/Notebook.html",
            "relUrl": "/r/2022/02/20/Notebook.html",
            "date": " • Feb 20, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "$documentclass{article} usepackage[english]{babel} usepackage{amsthm} . newtheorem{theorem}{Theorem}[section] newtheorem{lemma}[theorem]{Lemma} . begin{document} section{Introduction} begin{lemma} Given two line segments whose lengths are (a ) and (b ) respectively there is a real number (r ) such that (b=ra ). end{lemma} begin{proof} To prove it by contradiction try and assume that the statement is false, proceed from there and at some point you will arrive to a contradiction. end{proof} end{document}$ . About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . import pandas import matplotlib import scipy import seaborn as sns print(sns.get_dataset_names()) . [&#39;anagrams&#39;, &#39;anscombe&#39;, &#39;attention&#39;, &#39;brain_networks&#39;, &#39;car_crashes&#39;, &#39;diamonds&#39;, &#39;dots&#39;, &#39;exercise&#39;, &#39;flights&#39;, &#39;fmri&#39;, &#39;gammas&#39;, &#39;geyser&#39;, &#39;iris&#39;, &#39;mpg&#39;, &#39;penguins&#39;, &#39;planets&#39;, &#39;taxis&#39;, &#39;tips&#39;, &#39;titanic&#39;] . import seaborn as sns df = sns.load_dataset(&#39;car_crashes&#39;) df.head() . total speeding alcohol not_distracted no_previous ins_premium ins_losses abbrev . 0 18.8 | 7.332 | 5.640 | 18.048 | 15.040 | 784.55 | 145.08 | AL | . 1 18.1 | 7.421 | 4.525 | 16.290 | 17.014 | 1053.48 | 133.93 | AK | . 2 18.6 | 6.510 | 5.208 | 15.624 | 17.856 | 899.47 | 110.35 | AZ | . 3 22.4 | 4.032 | 5.824 | 21.056 | 21.280 | 827.34 | 142.39 | AR | . 4 12.0 | 4.200 | 3.360 | 10.920 | 10.680 | 878.41 | 165.63 | CA | . Data Visualization . You can display data in graphical representation in your blog: . import matplotlib.pyplot as plt # x axis values x = [1,2,3] # corresponding y axis values y = [2,4,1] # plotting the points plt.plot(x, y) # naming the x axis plt.xlabel(&#39;x - axis&#39;) # naming the y axis plt.ylabel(&#39;y - axis&#39;) # giving a title to my graph plt.title(&#39;My first graph!&#39;) # function to show the plot plt.show() . import seaborn as sns tips = sns.load_dataset(&#39;tips&#39;) sns.barplot(x=&quot;day&quot;, y=&quot;tip&quot;, data = tips) . &lt;AxesSubplot:xlabel=&#39;day&#39;, ylabel=&#39;tip&#39;&gt; . from matplotlib import pyplot as plt import numpy as np import math #needed for definition of pi x = np.arange(0, math.pi*2, 0.05) y = np.sin(x) plt.plot(x,y) plt.xlabel(&quot;angle&quot;) plt.ylabel(&quot;sine&quot;) plt.title(&#39;sine wave&#39;) plt.show() . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "http://www.endtoendprojects.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create link1 link2 link3 link4. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "http://www.endtoendprojects.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Paktpub_introductiontosqlitedatabasesforpythonprogramming_videocoursetutorial",
            "content": "## Using SQLite With Python . Link: https://subscription.packtpub.com/video/application-development/9781838982867/116872/116877/query-and-fetchall . import sqlite3 . Using SQLite With Python . Create SQLite Connection . #%%sql #conn = sqlite3.connect( # &quot;:memory:&quot; #) #store database inmemory temporary without perminent(placed inmemory like Ram it will delete ) . conn = sqlite3.connect(&quot;customer.db&quot;) . Create A Database Table . SQLite is Case Sensitive (Lowercase shoule be in lower and Uppercase should be in uppercase) . c = conn.cursor() # cursor to pointout . # create a table c.execute(&quot;&quot;&quot;CREATE TABLE customers ( first_name DATATYPE, last_name DATATYPE, email DATATYPE) &quot;&quot;&quot;) . c.execute(&quot;DROP TABLE customers&quot;) . &lt;sqlite3.Cursor at 0x13cc6b19650&gt; . # create a table c.execute(&quot;&quot;&quot;CREATE TABLE customers ( first_name text, last_name text, email text) &quot;&quot;&quot;) . &lt;sqlite3.Cursor at 0x13cc6b19650&gt; . Commit the Connection . conn.commit() # commit the execution . Close the Connection . conn.close() # close the connection . ReConnect with the database we want and execute the queries . Closed coonnection will not execute, so we have to connect again and create the cursor for execution . conn = sqlite3.connect(&quot;customer.db&quot;) . c = conn.cursor() # cursor to pointout . c.execute(&quot;INSERT INTO customers VALUES(&#39;John&#39;, &#39;Eler&#39;, &#39;john@codemy.com&#39;)&quot;) . &lt;sqlite3.Cursor at 0x13cc6b2a880&gt; . c.execute(&quot;SELECT * FROM customers&quot;) # this would be run with the above line so get the output (indivisual this line run will not get output) print(c.fetchone()) . (&#39;John&#39;, &#39;Eler&#39;, &#39;john@codemy.com&#39;) .",
            "url": "http://www.endtoendprojects.com/2020/01/14/Paktpub_IntroductionToSQLiteDatabasesForPythonProgramming_VideoCourseTutorial.html",
            "relUrl": "/2020/01/14/Paktpub_IntroductionToSQLiteDatabasesForPythonProgramming_VideoCourseTutorial.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "http://www.endtoendprojects.com/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is authored by Sumendar 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "http://www.endtoendprojects.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://www.endtoendprojects.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}